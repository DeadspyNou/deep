And = [[0,0,0],
[0,1,0],
[1,0,0],
[1,1,1]]

Or = [[0,0,0],
[0,1,1],
[1,0,1],
[1,1,1]]

def predict_W_threshold(row, weight):
  import math

  activation = weight[0]

  for i in range(len(row)-1):
    activation += weight[i+1] * row[i]

  return 0.0 if activation < 0.0 else 1.0

forplotsumerror=[]
forpltepoch=[]
def train_weight(train, l_rate, n_epoch):
  weight = [0.0 for i in range(len(train[0]))]
  sum_err_list = []

  for epoch in range(n_epoch):
    Sum_err = 0.0
    for row in train:
      prediction = predict_W_threshold(row, weight)
      error = row[-1] - prediction
      Sum_err += error**2
      
      # Updating Bias
      weight[0] = weight[0] + l_rate + error

      for i in range(len(row)-1):
        
        # Updating Weights
        weight[i+1] = weight[i+1] + row[i] * l_rate * error

    print('Epoch=%d, learning_rate=%f, Total_Error=%f'%(epoch, l_rate, Sum_err))
    forplotsumerror.append(Sum_err)
    
  return (weight, forplotsumerror)

n_epoch=100
l_rate=0.01
weight, forplotsumerror =train_weight(And,l_rate,n_epoch)

for row in And:
    prediction = predict_W_threshold(row, weight)
    print(f"    {row[-1]}\t\t\t{prediction}")
